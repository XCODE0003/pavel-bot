import { bot } from "../../index.js";
import config from '../../../../config.json' assert { type: 'json' };
import Database from "../../../database/index.js";
import User from "../../../database/schemas/user.js";
import commission from "../../../database/schemas/commission.js";
import checker from "../../../checker/index.js";

export default {
    name: "/start",
    async exec(message) {
        const user = await Database.getUser(message.from.id);
        if (!user) {
            await Database.createUser(message.from.id, !isNaN(+message.text.split(" ")[1]) ? message.text.split(" ")[1] : null, message.from.username ? `@${message.from.username}` : message.from.first_name);
        }

        if (!user?.member) {
            const { status } = await bot.getChatMember(isNaN(+config.channel) ? (await bot.getChat(`@${config.channel}`)).id : config.channel, message.from.id)
                .catch(() => ({ status: 'error' }));

            if (status === 'left') {
                await bot.deleteMessage(message.chat.id, message.message_id);
                const msg = await bot.sendPhoto(message.from.id, 'cdn/hi.png', {
                    caption: `üëãüèª –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TonLog!

üíé –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–Ω–µ–ª—å—é –≤—Å—Ç—É–ø–∏ –≤ –Ω–∞—à —á–∞—Ç! üëáüèª`,
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "‚ûï –í—Å—Ç—É–ø–∏—Ç—å",
                                    url: config.chat
                                }
                            ]
                        ]
                    }
                });
                return checker(message.from.id, msg.message_id);
            } else await User.updateOne({ id: message.from.id }, { $set: { member: true } });
        }

        await bot.sendMessage(message.from.id, `üíé –í–∞–º –±—ã–ª–æ –≤—ã–≤–µ–¥–µ–Ω–æ –º–µ–Ω—é`, {
            reply_markup: {
                resize_keyboard: true,
                keyboard: [
                    [
                        {
                            text: 'üè† –ú–µ–Ω—é'
                        }
                    ]
                ]
            }
        })

        await bot.sendPhoto(message.from.id, 'cdn/menu.png', {
            caption: `<b>‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <a href="https://t.me/tonlog">TonLog</a>!</b>

<b>üßæ –ö–æ–º–∏—Å—Å–∏—è:</b> –ö–∞–∂–¥—ã–π ${user?.com || (await commission.findOne({})).value} –ª–æ–≥`,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üíª –ü—Ä–æ—Ñ–∏–ª—å',
                            callback_data: 'profile'
                        },
                        {
                            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LZT',
                            callback_data: 'lzt'
                        }
                    ],
                    [
                        {
                            text: "ü§ñ –ë–æ—Ç—ã",
                            callback_data: 'bots'
                        },
                        {
                            text: 'üåê –î–æ–º–µ–Ω—ã',
                            callback_data: `domains`
                        }
                    ],
                    [
                        {
                            text: 'üèÜ –¢–æ–ø –ü—Ä–æ–µ–∫—Ç–∞',
                            callback_data: 'top:all'
                        },
                        {
                            text: 'üìÉ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                            callback_data: 'info'
                        }
                    ],
                    [
                        {
                            text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
                            callback_data: 'templates'
                        }
                    ]
                ]
            }
        })
    }
}