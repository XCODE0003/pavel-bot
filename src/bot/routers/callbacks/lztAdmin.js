import { bot } from "../../index.js";
import Database from "../../../database/index.js";
import market from "../../../database/schemas/market.js";
import User from "../../../database/schemas/user.js";
import states from "../../states.js";

export default {
    name: "lztadmin",
    async exec(query, [action, reset]) {

        if (action) {
            switch (action) {
                case 'on':
                case 'off':
                    const u = await User.findOneAndUpdate({ id: query.from.id }, {
                        lztOn: action === 'on'
                    }, { new: true });

                    let inline_keyboard = query.message.reply_markup.inline_keyboard;

                    inline_keyboard[0][0] = {
                        text: u.lztOn ? 'üü¢ LZT' : 'üõë LZT',
                        callback_data: u.lztOn ? `lztadmin:off` : 'lztadmin:on'
                    };

                    return await bot.editMessageReplyMarkup({ inline_keyboard }, {
                        message_id: query.message.message_id,
                        chat_id: query.message.chat.id
                    });

                case 'settings':
                    const usr = await Database.getUser(query.from.id);
                    const x = await market.findOne({ token: usr.admToken });

                    if (!usr.admToken || reset || !x) {
                        await bot.editMessageCaption(query, `*‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω LZT —Å –ø—Ä–∞–≤–∞–º–∏ –º–∞—Ä–∫–µ—Ç–∞.*`, {
                            parse_mode: 'Markdown',
                            message_id: query.message.message_id,
                            chat_id: query.message.chat.id,
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: 'üîô –ù–∞–∑–∞–¥',
                                            callback_data: 'admin'
                                        }
                                    ]
                                ]
                            }
                        }, 'cdn/settings.png')

                        return states.set(query.from.id, {
                            action: 'lztadmin',
                            args: []
                        });
                    }

                    return await bot.editMessageCaption(query, `*‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–±–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ.*`, {
                        parse_mode: 'Markdown',
                        message_id: query.message.message_id,
                        chat_id: query.message.chat.id,
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–¢–æ–∫–µ–Ω',
                                        callback_data: 'editlzta:token'
                                    }
                                ],
                                [
                                    {
                                        text: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –†—É—Å—Å–∫–æ–º',
                                        callback_data: 'editlzta:name'
                                    }
                                ],
                                [
                                    {
                                        text: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º',
                                        callback_data: 'editlzta:nameEn'
                                    }
                                ],
                                [
                                    {
                                        text: '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                                        callback_data: 'editlzta:bio'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞',
                                        callback_data: 'editlzta:price'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç',
                                        callback_data: 'editlzta:ru'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç',
                                        callback_data: 'editlzta:ua'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –ë–µ–ª–∞—Ä—É—Å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç',
                                        callback_data: 'editlzta:br'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –ü–æ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç',
                                        callback_data: 'editlzta:pl'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –ö–∞–∑–∞—Ö—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç',
                                        callback_data: 'editlzta:kz'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –ö—ã—Ä–≥—ã—Å—Ç–∞–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç',
                                        callback_data: 'editlzta:kg'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç',
                                        callback_data: 'editlzta:az'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç',
                                        callback_data: 'editlzta:in'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –ü—Ä–µ–º–∏—É–º –ê–∫–∫–∞—É–Ω—Ç',
                                        callback_data: 'editlzta:premium'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ –°–ø–∞–º-–±–ª–æ–∫',
                                        callback_data: 'editlzta:spam'
                                    }
                                ],
                                [
                                    {
                                        text: '–¶–µ–Ω–∞ –∑–∞ 2FA',
                                        callback_data: 'editlzta:pass'
                                    }
                                ],
                                [
                                    {
                                        text: 'üîÑ –ó–∞–Ω–æ–≤–æ',
                                        callback_data: `lztadmin:settings:true`
                                    },
                                    {
                                        text: 'üîô –ù–∞–∑–∞–¥',
                                        callback_data: 'lztadmin'
                                    }
                                ]
                            ]
                        }
                    }, 'cdn/settings.png');
                    break;
            }
        }

        const user = await Database.getUser(query.from.id);
        const m = await market.findOne({ token: user.admToken });


        if (!user.admToken || !m) return await bot.editMessageCaption(query, `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

*–í—ã –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–¥–∞–∂—É –Ω–∞ LZT.*`, {
            parse_mode: 'Markdown',
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üõë LZT –í—ã–∫–ª—é—á–µ–Ω',
                            callback_data: `lztoff:adm`
                        },
                        {
                            text: `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏`,
                            callback_data: 'lztadmin:settings'
                        }
                    ],
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'admin'
                        }
                    ]
                ]
            }
        }, 'cdn/settings.png');

        await bot.editMessageCaption(query, `*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏*

*üí∞ –¶–µ–Ω–∞:* ${m.price}
üóí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  –£—Å–ø–µ—à–Ω–æ –≤—ã–ª–æ–∂–µ–Ω–æ: ${m.success}
  –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${m.error}
  –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞: ${m.resale}`, {
            parse_mode: 'MarkdownV2',
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: user.lztOn ? 'üü¢ LZT –í–∫–ª—é—á–µ–Ω' : 'üõë LZT –í—ã–∫–ª—é—á–µ–Ω',
                            callback_data: user.lztOn ? `lztadmin:off` : 'lztadmin:on'
                        },
                        {
                            text: `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏`,
                            callback_data: 'lztadmin:settings'
                        }
                    ],
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'admin'
                        }
                    ]
                ]
            }
        }, 'cdn/settings.png');
    }
}