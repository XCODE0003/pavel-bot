import { bot } from "../../index.js";
import Database from "../../../database/index.js";
import market from "../../../database/schemas/market.js";
import User from "../../../database/schemas/user.js";
import states from "../../states.js";

export default {
    name: "lzt",
    async exec(query, [action, reset]) {
        if (action) {
            switch (action) {
                case 'on':
                case 'off':
                    const u = await User.findOneAndUpdate({ id: query.from.id }, {
                        lztOn: action === 'on'
                    }, { new: true });

                    let inline_keyboard = query.message.reply_markup.inline_keyboard;

                    inline_keyboard[0][0] = {
                        text: u.lztOn ? 'üü¢ LZT' : 'üõë LZT',
                        callback_data: u.lztOn ? `lzt:off` : 'lzt:on'
                    };

                    return await bot.editMessageReplyMarkup({ inline_keyboard }, {
                        message_id: query.message.message_id,
                        chat_id: query.message.chat.id
                    });

                case 'settings':
                    const usr = await Database.getUser(query.from.id);
                    const x = await market.findOne({ token: usr.lzt });

                    if (!usr.lzt || reset || !x) {
                        await bot.editMessageCaption(query, `*‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω LZT —Å –ø—Ä–∞–≤–∞–º–∏ –º–∞—Ä–∫–µ—Ç–∞.*

‚ùî [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ-–∑–∞–ª–∏–≤ LZT](https://teletype.in/@tonlog/auto-zaliv)
                            
‚ùï –î–ª—è –≤—ã—Ö–æ–¥–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "üè† –ú–µ–Ω—é"
‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º –≤—ã—Ö–æ–¥–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è. –í–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞.`, {
                            parse_mode: 'Markdown',
                            message_id: query.message.message_id,
                            chat_id: query.message.chat.id,
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: 'üîô –ù–∞–∑–∞–¥',
                                            callback_data: 'menu'
                                        }
                                    ]
                                ]
                            }
                        }, 'cdn/settings.png')

                        return states.set(query.from.id, {
                            action: 'lzt',
                            args: []
                        });
                    }

                    return await bot.editMessageCaption(query, `*‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–±–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ.*`, {
                        parse_mode: 'Markdown',
                        message_id: query.message.message_id,
                        chat_id: query.message.chat.id,
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: `üá∑üá∫ –†–æ—Å—Å–∏—è | ${x.ru ? x.ru : 0} RUB`, callback_data: 'editlzt:ru' }
                                ],
                                [
                                    { text: `üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞ | ${x.ua ? x.ua : 0} RUB`, callback_data: 'editlzt:ua' }
                                ],
                                [
                                    { text: `üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω | ${x.kz ? x.kz : 0} RUB`, callback_data: 'editlzt:kz' }
                                ],
                                [
                                    { text: `üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å | ${x.br ? x.br : 0} RUB`, callback_data: 'editlzt:br' }
                                ],
                                [
                                    { text: `üáµüá± –ü–æ–ª—å—à–∞ | ${x.pl ? x.pl : 0} RUB`, callback_data: 'editlzt:pl' }
                                ],
                                [
                                    { text: `üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω | ${x.kg ? x.kg : 0} RUB`, callback_data: 'editlzt:kg' }
                                ],
                                [
                                    { text: `üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω | ${x.az ? x.az : 0} RUB`, callback_data: 'editlzt:az' }
                                ],
                                [
                                    { text: `üáÆüá© –ò–Ω–¥–æ–Ω–µ–∑–∏—è | ${x.in ? x.in : 0} RUB`, callback_data: 'editlzt:in' }
                                ],
                                [
                                    { text: `üåç –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã | ${x.other ? x.other : 0} RUB`, callback_data: 'editlzt:price' }
                                ],
                                [
                                    { text: `üîê 2FA | ${x.pass ? x.pass : 0} RUB`, callback_data: 'editlzt:pass' }
                                ],
                                [
                                    { text: `‚ö†Ô∏è –°–ø–∞–º-–±–ª–æ–∫ | ${x.spam ? x.spam : 0} RUB`, callback_data: 'editlzt:spam' }
                                ],
                                [
                                    { text: `‚≠êÔ∏è Premium | ${x.premium ? x.premium : 0} RUB`, callback_data: 'editlzt:premium' }
                                ],
                                [
                                    { text: 'üîÑ –ó–∞–Ω–æ–≤–æ', callback_data: 'lzt:settings:true' },
                                    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lzt' }
                                ]
                            ]
                        }
                    }, 'cdn/settings.png');
                    break;
            }
        }

        const user = await Database.getUser(query.from.id);
        const m = await market.findOne({ token: user.lzt });

            
        if (!user.lzt || !m) return await bot.editMessageCaption(query, `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

*–í—ã –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–¥–∞–∂—É –Ω–∞ LZT.*`, {
            parse_mode: 'Markdown',
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å LZT',
                            // callback_data: 'menu'
                            callback_data: 'lzt:settings'
                        }
                    ],
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'start'
                        }
                    ]
                ]
            }
        }, 'cdn/settings.png');

        await bot.editMessageCaption(query, `*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏*

*üí∞ –¶–µ–Ω–∞:* ${m.price}
üóí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  –£—Å–ø–µ—à–Ω–æ –≤—ã–ª–æ–∂–µ–Ω–æ: ${m.success}
  –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${m.error}
  –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞: ${m.resale}`, {
            parse_mode: 'MarkdownV2',
            message_id: query.message.message_id,
            chat_id: query.message.chat.id,
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: user.lztOn ? 'üü¢ LZT' : 'üõë LZT',
                            callback_data: user.lztOn ? `lzt:off` : 'lzt:on'
                        },
                        {
                            text: `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏`,
                            callback_data: 'lzt:settings'
                        }
                    ],
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'start'
                        }
                    ]
                ]
            }
        }, 'cdn/settings.png');
    }
}