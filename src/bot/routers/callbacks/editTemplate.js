import { bot } from "../../index.js";
import config from '../../../../config.json' assert { type: 'json' };
import states from "../../states.js";
import template from "../../../database/schemas/template.js";
import botModel from "../../../database/schemas/bot.js";

export default {
    name: "editt",
    async exec(query, [id, action, confirm]) {
        const t = await template.findOne({ id }) || await dtemplate.findOne({ id });
        let inline_keyboard = query.message.reply_markup.inline_keyboard;
        if (!t) return await bot.answerCallbackQuery(query.id, {
            text: "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        });

        if (action === 'delete') {
            if (!confirm) {
                return await bot.editMessageCaption(query, `*‚ùî –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω ${t.name}*`, {
                    parse_mode: "Markdown",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üóë –£–¥–∞–ª–∏—Ç—å',
                                    callback_data: `editt:${id}:delete:true`
                                },
                            ],
                            [
                                {
                                    text: 'üîô –ù–∞–∑–∞–¥',
                                    callback_data: await template.findOne({ id }) ? `t:${id}` : `ts:${id}`
                                }
                            ]
                        ]
                    },
                    message_id: query.message.message_id,
                    chat_id: query.message.chat.id
                })
            }
            if (await botModel.findOne({ template: id })) {
                return await bot.sendMessage(query.from.id, `*‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É*`, {
                    parse_mode: "Markdown"
                });
            }
            await template.deleteOne({ id });
            await dtemplate.deleteOne({ id });
            return await bot.editMessageCaption(query, `*‚úÖ –®–∞–±–ª–æ–Ω <code>${t.name}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω*`, {
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîô –ù–∞–∑–∞–¥',
                                callback_data: `templates`
                            }
                        ]
                    ]
                },
                message_id: query.message.message_id,
                chat_id: query.message.chat.id
            })
        }
        if(action === 'deleteTelegram' || action === 'deleteBot' || action === 'mailingUnauth') {
            const templateDoc = await template.findOne({ id });
            let fieldValue;
            let buttonConfig;

            switch(action) {
                case 'deleteTelegram':
                    fieldValue = !templateDoc.deleteTelegram;
                    buttonConfig = {
                        index: [10, 0],
                        text: `üîá –£–¥–∞–ª–∏—Ç—å —á–∞—Ç —Å telegram ${fieldValue ? 'üü¢' : 'üî¥'}`,
                        field: 'deleteTelegram'
                    };
                    break;
                case 'deleteBot':
                    fieldValue = !templateDoc.deleteBot;
                    buttonConfig = {
                        index: [9, 0],
                        text: `ü§ñ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º ${fieldValue ? 'üü¢' : 'üî¥'}`,
                        field: 'deleteBot'
                    };
                    break;
                case 'mailingUnauth':
                    fieldValue = !templateDoc.mailingUnauth;
                    buttonConfig = {
                        index: [8, 0],
                        text: `üéâ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ${fieldValue ? 'üü¢' : 'üî¥'}`,
                        field: 'mailingUnauth'
                    };
                    break;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await template.findOneAndUpdate(
                { id }, 
                { [buttonConfig.field]: fieldValue },
                { new: true }
            );

           
            inline_keyboard[buttonConfig.index[0]][buttonConfig.index[1]] = {
                text: buttonConfig.text,
                callback_data: `editt:${id}:${action}`
            };
            
            return await bot.editMessageReplyMarkup({ inline_keyboard }, {
                message_id: query.message.message_id,
                chat_id: query.message.chat.id
            });
        }

        states.set(query.from.id, { action: 'editt', args: [id, action] })
        const message = {
            start: {
                title: 'üëãüèª –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start',
                description: '–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ /start. –ö–ª—é—á–µ–≤–æ–π —Å–º—ã—Å–ª –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.',
                note: '–í—ã –º–æ–∂–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏. –¢–∞–∫ –∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã.',
                value: t[action]
            },
            contact: {
                title: 'üë§ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                description: '–ö–Ω–æ–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –±–æ—Ç–∞, –ø–æ –Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞.',
                note: '–í–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.',
                value: t[action]
            },
            wait: {
                title: '‚åõÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞',
                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∂–¥—ë—Ç –∫–æ–¥.',
                value: t[action]
            },
            code: {
                title: 'üì≤ –°–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞',
                description: '–ü–æ—è–≤–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏ —Ç–µ–∫—Å—Ç —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
                value: t[action]
            },
            NaNCode: {
                title: '‚å®Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ –∫–æ–¥–∞ –≤ —á–∞—Ç–µ',
                description: '–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥ –Ω–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –∞ –≤ —á–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                value: t[action]
            },
            wrongCode: {
                title: '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥',
                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ –∫–æ–¥. 5 —Å–µ–∫—É–Ω–¥ –æ–Ω –∂–¥—ë—Ç. (–¥–æ 3-—Ö –ø–æ–ø—ã—Ç–æ–∫)',
                value: t[action]
            },
            timeout: {
                title: '‚ôªÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞',
                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–¥ –∏ –∂–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.',
                value: t[action]
            },
            error: {
                title: 'üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞',
                description: '–í –º–µ–Ω–µ–¥–∂–µ—Ä–µ –±—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –±–∞–≥–∏. –¢–∞–∫ —á—Ç–æ –ø—Ä–æ—Å–∏–º –∂–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞.',
                value: t[action]
            },
            auth: {
                title: 'üéâ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                description: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.',
                note: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∂–∞—Ç—å "–î–∞, —ç—Ç–æ —è" –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤.',
                value: t[action]
            },
            password: {
                title: 'üîê –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è (2FA)',
                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.',
                value: t[action]
            },
            wrongPassword: {
                title: 'üîí –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA)',
                description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –æ—Ç 2FA. (–¥–∞–µ—Ç—Å—è 3 –ø–æ–ø—ã—Ç–∫–∏)',
                value: t[action]
            },
            mailing1h: {
                title: 'üì£ –ê–≤—Ç–æ.–†–∞—Å—Å—ã–ª–∫–∞',
                description: '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø—É—Å—Ç—è 5/10/30/60/120 –º–∏–Ω—É—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.',
                value: t[action]
            },
            button: {
                title: 'üîò –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏',
                description: '–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ.',
                value: t[action]
            }
        }

        const formatMessage = (msg) => {
            return `<b>${msg.title}</b>\n\n<i>‚ùî ${msg.description}</i>\n\n<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–π—á–∞—Å:</b>\n${msg.value}${msg.note ? `\n\n<i>‚ùï ${msg.note}</i>` : '\n\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>'}`
        }
        await bot.editMessageCaption(query, formatMessage(message[action]), {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: await template.findOne({ id }) ? `t:${id}` : `ts:${id}`
                        }
                    ]
                ]
            },
            message_id: query.message.message_id,
            chat_id: query.message.chat.id
        })
    }
}