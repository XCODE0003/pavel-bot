import { bot } from "../../index.js";
import config from '../../../../config.json' assert { type: 'json' };
import states from "../../states.js";
import template from "../../../database/schemas/template.js";
import botModel from "../../../database/schemas/bot.js";

export default {
    name: "editt",
    async exec(query, [id, action, confirm]) {
        const t = await template.findOne({ id }) || await dtemplate.findOne({ id });
        if (!t) return await bot.answerCallbackQuery(query.id, {
            text: "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        });

        if (action === 'delete') {
            if (!confirm) {
                return await bot.editMessageCaption(query, `*‚ùî –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω ${t.name}*`, {
                    parse_mode: "Markdown",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üóë –£–¥–∞–ª–∏—Ç—å',
                                    callback_data: `editt:${id}:delete:true`
                                },
                            ],
                            [
                                {
                                    text: 'üîô –ù–∞–∑–∞–¥',
                                    callback_data: await template.findOne({ id }) ? `t:${id}` : `ts:${id}`
                                }
                            ]
                        ]
                    },
                    message_id: query.message.message_id,
                    chat_id: query.message.chat.id
                })
            }
            if (await botModel.findOne({ template: id })) {
                return await bot.sendMessage(query.from.id, `*‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±–æ—Ç—É*`, {
                    parse_mode: "Markdown"
                });
            }
            await template.deleteOne({ id });
            await dtemplate.deleteOne({ id });
            return await bot.editMessageCaption(query, `*‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω*`, {
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîô –ù–∞–∑–∞–¥',
                                callback_data: `templates`
                            }
                        ]
                    ]
                },
                message_id: query.message.message_id,
                chat_id: query.message.chat.id
            })
        }

        states.set(query.from.id, { action: 'editt', args: [id, action] })
        await bot.editMessageCaption(query, `<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–π—á–∞—Å:</b>
${t[action]}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:${action.startsWith('url') ? `

<b>üí°–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –±–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –í–∞—à –æ—Ñ—Ñ–µ—Ä –≤–≤–µ–¥–∏—Ç–µ: /c—Ç–∞—Ä—Ç</b>` : ''}`, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: await template.findOne({ id }) ? `t:${id}` : `ts:${id}`
                        }
                    ]
                ]
            },
            message_id: query.message.message_id,
            chat_id: query.message.chat.id
        })
    }
}