import axios from "axios";
import domain from "../../../database/schemas/domain.js"
import { bot } from "../../index.js";
import { createZone, updateDNSRecord } from '../../../cloudflare/api.js';
import config from '../../../../config.json' assert { type: 'json' };

export default {
    name: "cd",
    async exec(query, [template, token]) {
        try {
            const zoneData = await createZone(token);
            await new domain({
                worker: query.from.id,
                name: token,
                id: Date.now(),
                template: +template,
                zoneId: zoneData.id
            }).save();
            await updateDNSRecord(zoneData.id, 'A', token, config.ip_server);

            const nameservers = zoneData.name_servers;
            const nsText = nameservers.map(ns => `\`${ns}\`\n`).join('');

            await bot.editMessageCaption(query, `<b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NS –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞:</b>

<code>${nsText}</code>

<i>‚ùî –î–æ–±–∞–≤–ª—è–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.</i>

<i>‚è≥ –î–æ–º–µ–Ω –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤! –ú—ã –ø—Ä–∏—à–ª–µ–º –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</i>`, {
                message_id: query.message.message_id,
                chat_id: query.message.chat.id,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: `‚úÖ –ì–æ—Ç–æ–≤–æ`,
                                callback_data: `domains`
                            }
                        ],
                        [
                            {
                                text: `üîô –ù–∞–∑–∞–¥`,
                                callback_data: `domains`
                            }
                        ]
                    ]
                }
            }, 'cdn/domains.png');
        } catch (error) {
            if (error.message === "An identical record already exists.") {
                await bot.sendMessage(query.from.id,
                    `*–í–∞—à –¥–æ–º–µ–Ω —É–∂–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω, –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤—è–∑—ã–≤–∞—Ç—å ns –∑–∞–ø–∏—Å–∏, –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è*`,
                    { parse_mode: 'Markdown' }
                );
                return;
            } else {
                await bot.sendMessage(query.from.id,
                    `*‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–º–µ–Ω–∞: ${error.message}*`,
                    { parse_mode: 'Markdown' }
                );
            }
        }

        const intr = setInterval(async () => {
            const response = await axios.get(`https://${token}/ready`)
                .catch(() => null);

            if (response) {
                clearInterval(intr);

                await bot.sendMessage(query.from.id, `*‚úÖ –î–æ–º–µ–Ω ${token} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*`, {
                    parse_mode: 'Markdown'
                })
            }
        }, 30 * 1000);

        setTimeout(() => {
            clearInterval(intr);
        }, 90000000);
    }
}