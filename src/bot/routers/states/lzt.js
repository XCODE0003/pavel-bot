import { bot } from "../../index.js";
import config from '../../../../config.json' assert { type: 'json' };
import states from "../../states.js";
import template from "../../../database/schemas/market.js";
import user from "../../../database/schemas/user.js";
import axios from "axios";

const callbacks = {
    'token': true,
    'ru_title': true,
    'en_title': true,
    'before_description': true,
    'after_description': true,
    'ru_price': true,
    'ua_price': true,
    'by_price': true,
    'pl_price': true,
    'kz_price': true,
    'kg_price': true,
    'az_price': true,
    'id_price': true,
    '2fa_price': true,
    'spam_price': true,
    'premium_price': true
};

let lztModule;

bot.on('callback_query', async (query) => {
    console.log('Callback received:', query.data);
    
    if (callbacks[query.data]) {
        const state = states.get(query.message.chat.id);
        console.log('Current state before:', state);
        
        if (state && state.args.length > 0) {
            try {
                await bot.deleteMessage(query.message.chat.id, query.message.message_id);
                
                state.args.pop();
                const previousArg = state.args[state.args.length - 1];
                states.set(query.message.chat.id, state);
                
                console.log('State after pop:', state);
                console.log('Previous arg:', previousArg);

                const message = {
                    from: { id: query.message.chat.id },
                    raw: previousArg || '',
                    chat: query.message.chat
                };

                await bot.answerCallbackQuery(query.id);
                
                await lztModule.exec(message, state.args.slice(0, -1));
            } catch (error) {
                console.error('Error handling back:', error);
                await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥' });
            }
        }
    }
});

const lzt = {
    name: "lzt",
    async exec(message, args) {
        console.log('Exec called with message:', message);
        console.log('Exec called with args:', args);
        
        if (!message.raw && !args.length) return;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if (!args[0]) {
            const response = await axios.get(`https://api.lzt.market/me`, {
                headers: {
                    authorization: `Bearer ${message.raw}`
                }
            })
                .catch(e => e.response)
                .then(r => r?.status || 401)

            if (response !== 200) return await bot.sendMessage(message.from.id, `*‚ùå –¢–æ–∫–µ–Ω LZT –Ω–µ–≤–µ—Ä–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑!*

‚ùî [–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ-–∑–∞–ª–∏–≤ LZT](https://teletype.in/@tonlog/auto-zaliv)`, {
                parse_mode: 'Markdown',
                reply_markup
            });

            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üá∑üá∫ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.*

‚ùî –í—ã –ø–æ–º–æ–∂–µ—Ç–µ –Ω–∞–º –µ—Å–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–µ—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø–∞–Ω–µ–ª–∏ "TL" "TonLog" –°–ø–∞—Å–∏–±–æ!`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'token' }]]
                }
            })
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (!args[1]) {
            if (!/^[–∞-—è—ë–ê-–Ø–Å\s\d@"',.!?-]+$/.test(message.raw)) {
                return await bot.sendMessage(message.from.id, `*‚ùå –û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!*

‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑.`, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'token' }]]
                    }
                });
            }
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üá¨üáß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.*

‚ùî [–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º](https://translate.google.com/?hl=ru&sl=ru&tl=en&op=translate)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'ru_title' }]]
                }
            })
        }

        if (!args[2]) {
            if (!/^[a-zA-Z\s\d@"',.!?-]+$/.test(message.raw)) {
                return bot.sendMessage(message.from.id, `*‚ùå –û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!*

‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑.`, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'b:ru_title' }]]
                    }
                });
            }
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üìî –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –î–û –ø–æ–∫—É–ø–∫–∏.*

‚ùî –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±—ã—Ç —Å @TonLog –ª–∏–±–æ @tonlogpanelbot. –ù–∞–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîú –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_description' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'en_title' }]
                    ]
                }
            })
        }
        
        if (!args[3]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üìì –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ü–û–°–õ–ï –ø–æ–∫—É–ø–∫–∏.*

‚ùî –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±—ã—Ç —Å @TonLog –ª–∏–±–æ @tonlogpanelbot. –ù–∞–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîú –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_after_description' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'before_description' }]
                    ]
                }
            })
        }

        if (!args[4]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üá∑üá∫ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&country[]=RU&password=no&spam=no&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'after_description' }]]
                }
            })
        }

        if (!args[5]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üá∫üá¶ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&country[]=UA&password=no&spam=no&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'ru_price' }]]
                }
            })
        }

        if (!args[6]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üáßüáæ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&country[]=BY&password=no&spam=no&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'ua_price' }]]
                }
            })
        }

        if (!args[7]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üáµüá± –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ü–æ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&country[]=PL&password=no&spam=no&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'by_price' }]]
                }
            })
        }

        if (!args[8]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üá∞üáø –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&country[]=KZ&password=no&spam=no&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'pl_price' }]]
                }
            })
        }

        if (!args[9]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üá∞üá¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ö—ã—Ä–≥—ã–∑—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&country[]=KG&password=no&spam=no&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'kz_price' }]]
                }
            })
        }

        if (!args[10]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üá¶üáø –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&country[]=AZ&password=no&spam=no&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'kg_price' }]]
                }
            })
        }

        if (!args[11]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üáÆüá© –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&country[]=ID&password=no&spam=no&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'az_price' }]]
                }
            })
        }

        if (!args[12]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*üîê –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–∞—Ä–æ–ª–µ–º. (2FA)*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&password=yes&spam=no&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'id_price' }]]
                }
            })
        }

        if (!args[13]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∞–∫–∫–∞—É–Ω—Ç—ã c —Å–ø–∞–º –±–ª–æ–∫–æ–º.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&password=no&spam=yes&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: '2fa_price' }]]
                }
            })
        }

        if (!args[14]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw] })
            return await bot.sendMessage(message.from.id, `*‚≠êÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∞–∫–∫–∞—É–Ω—Ç—ã —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π.*

‚ùî [–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–æ–º LZT](https://lzt.market/telegram/?origin[]=fishing&premium=yes&order_by=price_to_up)`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'spam_price' }]]
                }
            })
        }

        const priceSteps = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
        if (priceSteps.includes(args.length)) {
            if (isNaN(+message.raw) || +message.raw < 0) {
                return bot.sendMessage(message.from.id, `*‚ùå –û—à–∏–±–∫–∞! –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!*

‚ùî –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑.`, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `b:price_${args.length - 1}` }]]
                    }
                });
            }
        }

        const [token, name, nameEn, bio, price_total, ru, ua, br, pl, kz, kg, az, _in, premium, pass] = args;
        const price = ru

        await new template({ id: Date.now(), nameEn, bio, token, name, price, ru, ua, br, pl, kz, kg, az, in: _in, premium, pass, spam: message.raw }).save();
        await user.findOneAndUpdate({ id: message.from.id }, { $set: { lzt: token } })
        states.delete(message.from.id);
        return await bot.sendMessage(message.from.id, `*‚úÖ LZT —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –¢—ã –º–æ–ª–æ–¥–µ—Ü!*`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                            callback_data: 'lzt:settings'
                        }
                    ],
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'menu'
                        }
                    ]
                ]
            }
        });
    }
};

lztModule = lzt;

export default lzt;