import { bot } from "../../index.js";
import config from '../../../../config.json' assert { type: 'json' };
import states from "../../states.js";
import template from "../../../database/schemas/market.js";
import user from "../../../database/schemas/user.js";
import axios from "axios";

const reply_markup = {
    inline_keyboard: [
        [
            {
                text: 'üîô –ù–∞–∑–∞–¥',
                callback_data: 'b:lzt'
            }
        ]
    ]
}

export default {
    name: "lzt",
    async exec(message, args) {
        if(!message.raw) return;
        if(!args[0]) {
            const response = await axios.get(`https://api.lzt.market/me`, {
                headers: {
                    authorization: `Bearer ${message.raw}`
                }
            })
                .catch(e => e.response)
                .then(r => r?.status || 401)

            if(response !== 200) return await bot.sendMessage(message.from.id, `*‚úñÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.*`, {
                parse_mode: 'Markdown',
                reply_markup
            });

            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[1]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[2]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[3]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(isNaN(+message.raw)) {
            return await bot.sendMessage(message.from.id, `*‚úñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[4]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[5]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[6]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[7]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ü–æ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[8]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ö–∞–∑–∞—Ö—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[9]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ö—ã—Ä–≥—ã–∑—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[10]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[11]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[12]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ Premium –∞–∫–∫–∞—É–Ω—Ç. *`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[13]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∞–∫–∫–∞—É–Ω—Ç —Å 2FA. *`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        if(!args[14]) {
            states.set(message.from.id, { action: "lzt", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∞–∫–∫–∞—É–Ω—Ç —Å–æ —Å–ø–∞–º-–±–∞–Ω–æ–º.*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        const [token, name, nameEn, bio, price, ru, ua, br, pl, kz, kg, az, _in, premium, pass] = args;
        await new template({ id: Date.now(), nameEn, bio, token, name, price, ru, ua, br, pl, kz, kg, az, in: _in, premium, pass, spam: message.raw }).save();
        await user.findOneAndUpdate({ id: message.from.id }, { $set: { lzt: token }})
        states.delete(message.from.id);
        return await bot.sendMessage(message.from.id, `*‚úÖ LZT —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*`, {
            parse_mode: 'Markdown',
            reply_markup
        });
    }
}