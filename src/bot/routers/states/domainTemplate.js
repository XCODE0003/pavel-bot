import { bot } from "../../index.js";
import config from '../../../../config.json' assert { type: 'json' };
import states from "../../states.js";
import template from "../../../database/schemas/domainTemplate.js";
import {validateLink} from "../../../utils/index.js";

const reply_markup = {
    inline_keyboard: [
        [
            {
                text: 'üîô –ù–∞–∑–∞–¥',
                callback_data: 'b:templatess'
            }
        ]
    ]
}

export default {
    name: "templates",
    async exec(message, args) {
        if(!message.text) return;
        if(!args[1]) {
            states.set(message.from.id, { action: "templates", args: [...args, message.text]})
            return await bot.sendMessage(message.from.id, args[0] === 'bot'? `<b>üìò –í–≤–µ–¥–∏—Ç–µ username –±–æ—Ç–∞</b>
‚ùî Username –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–µ–Ω–¥–∏–Ω–≥–∞\nüí° –ü—Ä–∏–º–µ—Ä: @tonlogpanelbot` : `<b>üìò –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>üí° –ü—Ä–∏–º–µ—Ä: <code>10 000</code>`, {
                parse_mode: 'HTML',
                reply_markup
            })
        }

        if(!args[2]) {
            if(args[0] !== 'bot') {
                message.text += ` subscribers`;
            } else {
                message.text = `@` + message.text.replaceAll('@', '');
            }
            
            states.set(message.from.id, { action: "templates", args: [...args, message.text]})
            return await bot.sendMessage(message.from.id, `<b>üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É.

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç </b><a href="https://imgur.com/"><b>imgur.com</b></a>
2. <b>–ù–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É "New Post"</b>
3. <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ</b>
4. <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL –∫–∞—Ä—Ç–∏–Ω–∫–∏"</b>
5. <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç</b>`, {
                parse_mode: 'HTML',
                reply_markup
            })
        }

        if(!args[3]) {
            if(!validateLink(message.raw))
            {
                return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É*`,
                    {
                        parse_mode: 'Markdown'
    
                    });
            }
            states.set(message.from.id, { action: "templates", args: [...args, message.raw]})
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ –±–∏–æ –∫–∞–Ω–∞–ª–∞*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }

        const [type, name, desc, image] = args;
        await new template({ id: Date.now(), owner: message.from.id, type, name, desc, image, bio: message.text }).save();

        states.delete(message.from.id);
        return await bot.sendMessage(message.from.id, `*–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω*`, {
            parse_mode: 'Markdown',
            reply_markup
        });
    }
}