import { bot } from "../../index.js";
import market from "../../../database/schemas/market.js";
import Database from "../../../database/index.js";
import states from "../../states.js";

export default {
    name: "editEnTitle",
    async exec(message, args) {
        const user = await Database.getUser(message.from.id);
        const state = states.get(message.from.id);
        
        if (!/^[a-zA-Z\s\d@"',.!?-]+$/.test(message.raw)) {
            return await bot.sendPhoto(message.from.id, 'cdn/settings.png', {
                caption: `*‚ùå –û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!*\n\n‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑.`,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lzt:announcement' }
                    ]]
                }
            });
        }

        await market.findOneAndUpdate(
            { token: user.lzt },
            { $set: { en: message.raw } }
        );

        return await bot.sendPhoto(message.from.id, 'cdn/settings.png', {
            caption: `*‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*`,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[
                    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'lzt:announcement' }
                ]]
            }
        });
    }
} 